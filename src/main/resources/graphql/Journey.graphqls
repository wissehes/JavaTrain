type Journey {
    id: ID!

    serviceNumber: String!
    date: String!
    type: TrainType
    operator: String!
    lineNumber: String

    parts: [JourneyPart!]!

    reservationRequired: Boolean!
    supplementRequired: Boolean!
    specialTicketRequired: Boolean!
    includeInJourneyPlanner: Boolean!
}

type JourneyPart {
    serviceNumber: ID!
    stops: [Stop!]!
}

union Stop =
    StoppingStop |
    SkippingStop

type StoppingStop {
    station: Station!
    recognizableDestination: Station
    plannedDestination: Station!
    actualDestination: Station!

    stopStatus: Boolean!
    doNotBoard: Boolean!

    isStationAccessible: Boolean!
    isAssistanceAvailable: Boolean!

    arrival: StopMovement
    departure: StopMovement
}

type SkippingStop {
    station: Station!
    stopStatus: Boolean!
}

type StopMovement {
    plannedTime: String!
    actualTime: String!

    plannedPlatform: String
    actualPlatform: String

    cancelled: Boolean!

    """
    Delay in seconds
    """
    exactDelay: Int
    """
    Delay normalized to minutes rounded to the closest 5
    """
    normalizedDelay: Int
}

type TrainType {
    code: String
    value: String
}