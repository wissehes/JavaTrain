type Departure {
    journeyId: String!
    baseJourneyId: String!
    journeyDate: String!
    serviceName: String
    lineName: String
    isCancelled: Boolean!

    plannedDestination: [Station!]
    actualDestination: [Station!]
    destinationDisplay: String

    plannedViaStations: [Station!]
    actualViaStations: [Station!]
    wings: [TrainWing!]

    serviceType: String!
    serviceTypeCode: String!

    operator: String!
    trainStatus: TrainStatus
    specialFlags: SpecialFlags!

    # TODO: Create `Message` type which contains the type (journey tip or boarding tip) and value
    tips: [String!]!

    departureTime: DateTime!
    actualDepartureTime: DateTime!

    """
    Delay in seconds
    """
    exactDelay: Int

    """
    Delay normalized to minutes rounded to the closest 5
    """
    delayNormalized: Int

    plannedPlatform: String
    actualPlatform: String
    departureDirection: String

    # TODO:
#    public List<ScheduleChange> scheduleChanges;
}

type TrainWing {
    destination: Station!
    actualDestination: Station
    platform: String
    actualPlatform: String
    materialParts: [MaterialPart!]
}

type SpecialFlags {
    reservationRequired: Boolean!
    supplementRequired: Boolean!
    specialTicketRequired: Boolean!
    rearTrainSetRemains: Boolean!
    doNotBoard: Boolean!
}

type MaterialPart {
    materialNumber: ID
    destination: Station!
    actualDestination: Station
    type: String
    """
    Length in meters
    """
    length: Int
    departurePosition: Int
    departureOrder: Int
}

enum TrainStatus {
    UNKNOWN,
    APPROACHING,
    INCOMING,
    DOORS_OPENED,
    DOORS_CLOSED,
    DEPARTED
}